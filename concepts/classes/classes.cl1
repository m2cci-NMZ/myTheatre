--=========================================================================
--                          Modèle de classe
---------------------------------------------------------------------------
-- Ce modèle de classe est exprimé en ClassScript1.
-- Voir https://modelscript.readthedocs.io/en/latest/languages/classes1/index.html
-- ClassScript1 est une version annotée du langage USE OCL.
-- Les annotations sont en commentaires et commencent par :
--    "@" pour les annotations d'instructions,
--    "|" pour les annotations de documentation.
--=========================================================================
--
--@ class model MyTheatre
--@ import glossary model from "../glossaires/glossaires.gls"

model MyTheatre

---------------------------------------------------------------------------
-- enumerations
---------------------------------------------------------------------------

enum Cible {
    unCinqAns,
    jeunePublic,
    toutPublic,
    adulte
}

enum Type {
    opera,
    drame,
    humoristique,
    musical,
    cirque
}

--enum categorie {
--    orchestre,
--    balcon,
--    poulailler
--}
--enum typeSta {
--    adherents,
--    etudiants,
--    scolaires,
--   militaires,
--    seniors
--}

---------------------------------------------------------------------------
-- classes
---------------------------------------------------------------------------

class Spectacle
attributes
    numero_ : Integer
    nom : String
    prixDeBase : Real
    cible : Cible
    type : Type  
end


class Opera < Spectacle
attributes
    aUnOrchestre : Boolean
end


class Humoristique < Spectacle
attributes
    estUnOneWomanManShow : Boolean
end


class Representation
attributes
    horaire_ : String
    placesDispo_d : Integer
    tauxReduc : Real 
end


class Rang
attributes
    numero_ : Integer
end


class Place
attributes
  numero_ : Integer 
end


--class Zone
--attributes
 --  numero_ : Integer    
--end


class DossierAchat
attributes
  numero_: Integer
  prixGlobal_d : Real
end


--class Personne
--attributes
--  id_: Integer
--end


--class Status
--attributes
--  typeStatu_: typeSta
--  taux : Real
--end


class Utilisateur --< Personne
attributes
   login_: String
   nom : String
   prenom : String
   mail : String
   mdp : String 
end


--class Categorie
--attributes
--  categorie_: categorie
--  rapportPrix : Real  
--end

---------------------------------------------------------------------------
-- associations
---------------------------------------------------------------------------

association APourRepresentation between
    Spectacle [1] role spectacle
    Representation [*] role representations
end


--association EstDisponible between
--    Zone [1..*] role zones
--    Spectacle [*] role spectacles
--end


--association EstDansLaZone between
 --   Rang [1..*] role rangs 
 --   Zone [1] role zone
--end


--association EstDansLaCategorie between
--   Zone [1..*] role zones
--  Categorie [1] role categorie 
--end


composition Contient between
    Rang [1] role rang 
    Place [1..*] role places
end 


associationclass Ticket between
        Place[*] role places
        Representation[*] role representations
    attributes
        numero_: Integer
        dateEmission : String --@ {Date}
        prix_d : Real
end


association FaitPartieDUn between
     Ticket [1..*] role tickets
     DossierAchat [1] role dossierAchat
end


association AAchete between
     Utilisateur [0..1] role acheteur
     Ticket [*] role ticketsAchetes
end


--association EstBeneficier between
--    Status  [*] role status
--    Personne [*] role personnes
--end


association AReserve between
    Utilisateur  [0..1] role reserveur
    Ticket [*] role ticketsReserves
end


---------------------------------------------------------------------------
-- constraints
---------------------------------------------------------------------------

--@ constraint EstUnOpera
--@     scope
--@         Spectacle.type
--@         Opera
--@     | Si un Spectacle <s> est un est de type "opera" alors c'est
--@     | un Opera (et inversement, si c'est un Opera, il est de type "opera")


--@ constraint EstUnHumoristique
--@     scope
--@         Spectacle.type
--@         Humoristique
--@     | Si un Spectacle <s> est un est de type "humoristique" alors c'est
--@     | un Humoristique (et inversement)


--@ constraint PlaceReserveeEtAchetee
--@     scope
--@         AAchete
--@         AReserve
--@         Ticket
--@         Utilisateur
--@     | Un Ticket <t> ne peut pas être lié à un Utilisateur (pas forcément le même) <u> 
--@     | par AAchete et AReserve. <t> est soit réservé, soit acheté, mais pas les deux


--@ constraint PlacePasReserveeOuAchetee
--@     scope
--@         AAchete
--@         AReserve
--@         Ticket
--@         Utilisateur
--@     | Un Ticket <t> doit forcément être lié à un Utilisateur par AAchete ou AReserve
--@     | <t> n'existe pas tant qu'il n'y a pas eu d'achat ou de réservation


--@ constraint DateTicket
--@     scope
--@         Ticket.dateEmission
--@         Representation.horaire_
--@     | Un Ticket <t> ne peut pas être émis après la Representation
--@     | La date d'émission est donc antérieur à l'horaire de la représentation
